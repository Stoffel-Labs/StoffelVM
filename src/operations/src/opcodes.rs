use std::convert::TryFrom;


// TODO: Rip out half the opcodes because we can just have the runtime handle secret or clear
#[repr(u8)]
pub enum OpCode {
    LDI = 0x00,
    LDSI = 0x01,
    MOVC = 0x02,
    MOVS = 0x03,
    ADDC = 0x04,
    ADDS = 0x05,
    ADDM = 0x06,
    ADDCI = 0x07,
    ADDSI = 0x08,
    SUBC = 0x09,
    SUBS = 0x0A,
    SUBML = 0x0B,
    SUBMR = 0x0C,
    SUBCI = 0x0D,
    SUBSI = 0x0E,
    MULC = 0x0F,
    MULS = 0x10,
    MULM = 0x11,
    MULCI = 0x12,
    MULSI = 0x13,
    DIVC = 0x14,
    DIVCI = 0x15,
    MODC = 0x16,
    MODCI = 0x17,
    FLOORDIVC = 0x18,
    ANDC = 0x19,
    XORC = 0x1A,
    ORC = 0x1B,
    NOTC = 0x1C,
    SHLC = 0x1D,
    SHRC = 0x1E,
    SHLCI = 0x1F,
    SHRCI = 0x20,
    SHRSI = 0x21,
    JMP = 0x22,
    JMPNZ = 0x23,
    JMPEQZ = 0x24,
    ADD_FX = 0x25,
    SUB_FX = 0x26,
    MUL_FX = 0x27,
    DIV_FX = 0x28,
    NEG_FX = 0x29,
    ABS_FX = 0x2A,
    MUL_ACC_FX = 0x2B,
    SQRT_FX = 0x2C,
    EXP_FX = 0x2D,
    LOG_FX = 0x2E,
    CMP_EQ_FX = 0x2F,
    CMP_LT_FX = 0x30,
    CMP_GT_FX = 0x31,
    LDTN = 0x32,
    LDARG = 0x33,
    // Start / Stop the tape?
    START = 0x34,
    STOP = 0x35,
    // Split off into a thread, is this because we need parallel work or do we need async because if latter we can coroutine
    RUN_TAPE = 0x36,
    JOIN_TAPE = 0x37,
    // Crash the whole runtime!? ðŸ˜­
    CRASH = 0x38,
    // Set requirement on computation module
    REQBL = 0x39,
    TIME = 0x40,
    PRINTINT = 0x41,
    INVOKE_RANGEPROOF = 0x42,
    INVOKE_DATA_ORACLE = 0x43,
    // Add function-related opcodes
    CALL = 0x50,
    RET = 0x51,
    PUSHARG = 0x52,
}
// TODO: figure out what other traits we probably need

impl TryFrom<u8> for OpCode {
    type Error = ();

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            0x00 => Ok(OpCode::LDI),
            0x01 => Ok(OpCode::LDSI),
            0x02 => Ok(OpCode::MOVC),
            0x03 => Ok(OpCode::MOVS),
            0x04 => Ok(OpCode::ADDC),
            0x05 => Ok(OpCode::ADDS),
            0x06 => Ok(OpCode::ADDM),
            0x07 => Ok(OpCode::ADDCI),
            0x08 => Ok(OpCode::ADDSI),
            0x09 => Ok(OpCode::SUBC),
            0x0A => Ok(OpCode::SUBS),
            0x0B => Ok(OpCode::SUBML),
            0x0C => Ok(OpCode::SUBMR),
            0x0D => Ok(OpCode::SUBCI),
            0x0E => Ok(OpCode::SUBSI),
            0x0F => Ok(OpCode::MULC),
            0x10 => Ok(OpCode::MULS),
            0x11 => Ok(OpCode::MULM),
            0x12 => Ok(OpCode::MULCI),
            0x13 => Ok(OpCode::MULSI),
            0x14 => Ok(OpCode::DIVC),
            0x15 => Ok(OpCode::DIVCI),
            0x16 => Ok(OpCode::MODC),
            0x17 => Ok(OpCode::MODCI),
            0x18 => Ok(OpCode::FLOORDIVC),
            0x19 => Ok(OpCode::ANDC),
            0x1A => Ok(OpCode::XORC),
            0x1B => Ok(OpCode::ORC),
            0x1C => Ok(OpCode::NOTC),
            0x1D => Ok(OpCode::SHLC),
            0x1E => Ok(OpCode::SHRC),
            0x1F => Ok(OpCode::SHLCI),
            0x20 => Ok(OpCode::SHRCI),
            0x21 => Ok(OpCode::SHRSI),
            0x22 => Ok(OpCode::JMP),
            0x23 => Ok(OpCode::JMPNZ),
            0x24 => Ok(OpCode::JMPEQZ),
            0x25 => Ok(OpCode::ADD_FX),
            0x26 => Ok(OpCode::SUB_FX),
            0x27 => Ok(OpCode::MUL_FX),
            0x28 => Ok(OpCode::DIV_FX),
            0x29 => Ok(OpCode::NEG_FX),
            0x2A => Ok(OpCode::ABS_FX),
            0x2B => Ok(OpCode::MUL_ACC_FX),
            0x2C => Ok(OpCode::SQRT_FX),
            0x2D => Ok(OpCode::EXP_FX),
            0x2E => Ok(OpCode::LOG_FX),
            0x2F => Ok(OpCode::CMP_EQ_FX),
            0x30 => Ok(OpCode::CMP_LT_FX),
            0x31 => Ok(OpCode::CMP_GT_FX),
            0x32 => Ok(OpCode::LDTN),
            0x33 => Ok(OpCode::LDARG),
            0x34 => Ok(OpCode::START),
            0x35 => Ok(OpCode::STOP),
            0x36 => Ok(OpCode::RUN_TAPE),
            0x37 => Ok(OpCode::JOIN_TAPE),
            0x50 => Ok(OpCode::CALL),
            0x51 => Ok(OpCode::RET),
            0x52 => Ok(OpCode::PUSHARG),
            0x42 => Ok(OpCode::INVOKE_RANGEPROOF),
            0x43 => Ok(OpCode::INVOKE_DATA_ORACLE),
            _ => Err(()),
        }
    }
}
